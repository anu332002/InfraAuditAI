pipeline {
    agent any

    environment {
        IMAGE_NAME = 'infraauditai:latest'
        CHECKOV_REPORT = 'artifacts/checkov_report.json'
        TRIVY_REPORT = 'artifacts/trivy_report.json'
        AI_LOG = 'logs/ai_explanation.log'
        TRIVY_EXE = 'trivy.exe'
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                bat '''
                    docker build -t %IMAGE_NAME% .
                '''
            }
        }

        stage('Run Checkov Scan') {
            steps {
                echo 'Running Checkov scan...'
                bat '''
                    if not exist artifacts (
                        mkdir artifacts
                    )
                    checkov -d . --output json > %CHECKOV_REPORT%
                    icacls %CHECKOV_REPORT% /grant "Everyone:(OI)(CI)F"
                '''
            }
        }

        stage('Run Trivy Scan') {
            steps {
                echo 'Running Trivy vulnerability scan on Docker image...'
                bat '''
                    if not exist artifacts (
                        mkdir artifacts
                    )
                    %TRIVY_EXE% image -f json --output %TRIVY_REPORT% %IMAGE_NAME% || exit 0
                    icacls %TRIVY_REPORT% /grant "Everyone:(OI)(CI)F"
                '''
            }
        }

        stage('Explain Findings with AI') {
            steps {
                echo 'Generating AI explanation of security findings...'
                bat '''
                    if not exist logs (
                        mkdir logs
                    )
                    call .venv\\Scripts\\activate
                    python explain_findings.py --checkov %CHECKOV_REPORT% --trivy %TRIVY_REPORT% --output %AI_LOG%
                '''
            }
        }

        stage('Archive Reports') {
            steps {
                echo 'Archiving reports...'
                archiveArtifacts artifacts: 'artifacts/*.json', allowEmptyArchive: true
                archiveArtifacts artifacts: 'logs/*.log', allowEmptyArchive: true
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
    }
}
