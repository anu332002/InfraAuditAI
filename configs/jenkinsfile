pipeline {
    agent any

    environment {
        VENV_DIR = '.venv'
        CHECKOV_REPORT = 'artifacts\\checkov_report.json'
        TRIVY_REPORT = 'artifacts\\trivy_report.json'
        AI_LOG = 'logs\\ai_explanation.log'
        TRIVY_EXE = 'trivy.exe'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }

        stage('Set Up Virtual Environment') {
            steps {
                echo 'Creating virtual environment and installing requirements...'
                bat '''
                    if not exist %VENV_DIR% (
                        python -m venv %VENV_DIR%
                    )
                    call %VENV_DIR%\\Scripts\\activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }

        stage('Make Directories with permissions') {
            steps {
                echo 'Creating directories with permissions...'
                bat '''
                    if not exist artifacts (
                        mkdir artifacts
                        icacls artifacts /grant "Everyone:(OI)(CI)F"
                    )
                    if not exist logs (
                        mkdir logs
                        icacls logs /grant "Everyone:(OI)(CI)F"
                    )
                '''
            }
        }

        stage('Install Checkov and Trivy') {
            steps {
                echo 'Installing Checkov and Trivy...'
                bat '''
                    call %VENV_DIR%\\Scripts\\activate
                    pip install checkov

                    REM Download Trivy if not already downloaded
                    if not exist trivy.zip (
                        powershell -Command "Invoke-WebRequest -Uri https://github.com/aquasecurity/trivy/releases/download/v0.62.1/trivy_0.62.1_windows-64bit.zip -OutFile trivy.zip"
                        powershell -Command "Expand-Archive -Path trivy.zip -DestinationPath . -Force"
                    )
                '''
            }
        }

        stage('Run Checkov Scan') {
            steps {
                echo 'Running Checkov security scan...'
                bat '''
                    if not exist artifacts (
                        mkdir artifacts
                    )
                    call %VENV_DIR%\\Scripts\\activate
                    checkov -d . --output json > %CHECKOV_REPORT% || exit 0
                    icacls %CHECKOV_REPORT% /grant "Everyone:(OI)(CI)F"
                    echo "Contents of artifacts directory after Checkov scan:"
                    dir artifacts
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image for InfraAuditAI...'
                bat '''
                    docker build -t infraauditai:latest -f docker\\Dockerfile .
                '''
            }
        }

        stage('Run Trivy Scan') {
            steps {
                echo 'Running Trivy vulnerability scan on Docker image...'
                bat '''
                    if not exist artifacts (
                        mkdir artifacts
                    )
                    %TRIVY_EXE% image --format json infraauditai:latest > %TRIVY_REPORT%

                    icacls %TRIVY_REPORT% /grant "Everyone:(OI)(CI)F"
                '''
            }
        }

        stage('Explain Findings with AI') {
            steps {
                echo 'Generating AI explanation of security findings...'
                bat '''
                    if not exist logs (
                        mkdir logs
                    )
                    call %VENV_DIR%\\Scripts\\activate
                    python genai\\explain_findings.py > %AI_LOG%
                    echo "=== AI Explanation of Findings ==="
                    type %AI_LOG%
                    echo "=== End of Explanation ==="
                '''
            }
        }

        stage('Archive Reports') {
            steps {
                echo 'Archiving reports...'
                archiveArtifacts artifacts: 'artifacts\\*.json', allowEmptyArchive: true
                archiveArtifacts artifacts: 'artifacts\\*.txt', allowEmptyArchive: true
                archiveArtifacts artifacts: 'logs\\ai_explanation.log', allowEmptyArchive: true
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs and reports for details.'
        }
    }
}
