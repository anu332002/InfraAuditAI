pipeline {
    agent any

    environment {
        VENV_DIR = '.venv'
        CHECKOV_REPORT = 'artifacts\\checkov_report.json'
        REPORT_TRIVY = 'artifacts\\REPORT_TRIVY.json'
        AI_LOG = 'logs\\ai_explanation.log'
    }

    parameters {
        choice(
            name: 'RUN_STAGE',
            choices: ['ALL', 'Checkout', 'SetupVenv', 'MakeDirs', 'InstallCheckov', 'InstallTrivy', 'ScanCheckov', 'BuildDocker', 'ScanTrivy', 'ExplainAI', 'MonitoringStack', 'ArchiveReports', 'DeployK8s'],
            description: 'Select a specific stage to run or ALL to run the full pipeline'
        )
    }

    stages {
        stage('Checkout') {
            when {  expression { params.RUN_STAGE == 'ALL' || params.RUN_STAGE == 'Checkout' } } 
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }

        stage('Set Up Virtual Environment') {
            when {  expression { params.RUN_STAGE == 'ALL' || params.RUN_STAGE == 'SetupVenv' } } 
            steps {
                echo 'Creating virtual environment and installing requirements...'
                bat '''
                    if not exist %VENV_DIR% (
                        python -m venv %VENV_DIR%
                    )
                    call %VENV_DIR%\\Scripts\\activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }

        stage('Make Directories with permissions') {
            when {  expression { params.RUN_STAGE == 'ALL' || params.RUN_STAGE == 'MakeDirs' } } 
            steps {
                echo 'Creating directories with permissions...'
                bat '''
                    if not exist artifacts (
                        mkdir artifacts
                        icacls artifacts /grant "Everyone:(OI)(CI)F"
                    )
                    if not exist logs (
                        mkdir logs
                        icacls logs /grant "Everyone:(OI)(CI)F"
                    )
                '''
            }
        }

        stage('Install Checkov') {
            when {  expression { params.RUN_STAGE == 'ALL' || params.RUN_STAGE == 'InstallCheckov' } } 
            steps {
                echo 'Installing Checkov...'
                bat '''
                    call %VENV_DIR%\\Scripts\\activate
                    pip install checkov
                '''
            }
        }

        stage('Install Trivy') {
            when {  expression { params.RUN_STAGE == 'ALL' || params.RUN_STAGE == 'InstallTrivy' } } 
            steps {
                echo 'Installing Trivy from GitHub releases...'
                bat '''
                    if not exist trivy (
                        mkdir trivy
                        echo Downloading Trivy
                        powershell -Command "Invoke-WebRequest -Uri 'https://github.com/aquasecurity/trivy/releases/download/v0.62.1/trivy_0.62.1_windows-64bit.zip' -OutFile 'trivy\\trivy.zip'"
                        echo Extracting Trivy
                        powershell -Command "Expand-Archive -Path 'trivy\\trivy.zip' -DestinationPath 'trivy'"
                        echo Trivy extracted successfully
                        dir trivy
                    ) else (
                        echo Trivy directory already exists, checking executable
                        if not exist trivy\\trivy.exe (
                            echo Trivy executable missing, downloading again
                            powershell -Command "Invoke-WebRequest -Uri 'https://github.com/aquasecurity/trivy/releases/download/v0.62.1/trivy_0.62.1_windows-64bit.zip' -OutFile 'trivy\\trivy.zip'"
                            powershell -Command "Expand-Archive -Path 'trivy\\trivy.zip' -DestinationPath 'trivy' -Force"
                        )
                    )
                '''
            }
        }

        stage('Run Checkov Scan') {
            when {  expression { params.RUN_STAGE == 'ALL' || params.RUN_STAGE == 'ScanCheckov' } } 
            steps {
                echo 'Running Checkov security scan...'
                bat '''
                    if not exist artifacts (
                        mkdir artifacts
                    )
                    call %VENV_DIR%\\Scripts\\activate
                    checkov -d . --output json > %CHECKOV_REPORT% || exit 0
                    icacls %CHECKOV_REPORT% /grant "Everyone:(OI)(CI)F"
                    echo "Contents of artifacts directory after Checkov scan:"
                    dir artifacts
                '''
            }
        }

        stage('Build Docker Image') {
            when {  expression { params.RUN_STAGE == 'ALL' || params.RUN_STAGE == 'BuildDocker' } } 
            steps {
                echo 'Building Docker image for InfraAuditAI...'
                bat '''
                    docker build -t infraauditai:latest -f docker\\Dockerfile .
                '''
            }
        }

        stage('Run Trivy Scan') {
            when {  expression { params.RUN_STAGE == 'ALL' || params.RUN_STAGE == 'ScanTrivy' } } 
            steps {
                echo 'Running Trivy vulnerability scan on Docker image...'
                bat '''
                    if not exist artifacts (
                        mkdir artifacts
                    )
                    
                    echo Running Trivy scan...
                    if exist trivy\\trivy.exe (
                        trivy\\trivy.exe image -f json infraauditai:latest -o %REPORT_TRIVY%
                    ) else (
                        echo ERROR: Trivy executable not found!
                        echo Current directory content:
                        dir
                        echo Trivy directory content:
                        dir trivy
                        exit 1
                    )
                    
                    echo Setting file permissions...
                    icacls %REPORT_TRIVY% /grant "Everyone:(OI)(CI)F"
                    
                    echo Contents of artifacts directory after Trivy scan:
                    dir artifacts
                '''
            }
        }

        stage('Explain Findings with AI') {
            when {  expression { params.RUN_STAGE == 'ALL' || params.RUN_STAGE == 'ExplainAI' } } 
            steps {
                echo 'Generating AI explanation of security findings...'
                bat '''
                    if not exist logs (
                        mkdir logs
                    )
                    call %VENV_DIR%\\Scripts\\activate
                    python genai\\explain_findings.py
                '''
            }
        }

        stage('Start Monitoring Stack with Docker Compose') {
            when {  expression { params.RUN_STAGE == 'ALL' || params.RUN_STAGE == 'MonitoringStack' } } 
            steps {
                echo 'Starting monitoring stack (FastAPI, Prometheus, Grafana)...'
                bat '''
                    cd docker
                    docker-compose down || exit 0
                    docker-compose up --build -d
                    cd ..
                '''
            }
        }


        stage('Archive Reports') {
            when {  expression { params.RUN_STAGE == 'ALL' || params.RUN_STAGE == 'ArchiveReports' } } 
            steps {
                echo 'Archiving reports...'
                archiveArtifacts artifacts: 'artifacts\\*.json', allowEmptyArchive: true
                archiveArtifacts artifacts: 'logs\\*.log', allowEmptyArchive: true
            }
        }

        stage('Deploy to Kubernetes with KIND') {
            when {  expression { params.RUN_STAGE == 'ALL' || params.RUN_STAGE == 'DeployK8s' } } 
            steps {
                echo 'Creating KIND cluster and deploying to Kubernetes...'
                bat '''
                    kubectl config use-context kind-infraaudit
                    docker build -t infraauditai:latest -f docker\\Dockerfile .
                    kind load docker-image infraauditai:latest --name infraaudit
                    kubectl apply -f configs\\kubernetes\\deployment.yaml
                    kubectl apply -f configs\\kubernetes\\service.yaml
                    kubectl get svc
                    ping -n 6 127.0.0.1 > nul
                    kubectl get pods -o wide
                '''
            }
        }

    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs and reports for details.'
        }
    }
}